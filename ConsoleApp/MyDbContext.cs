// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ConsoleApp
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.32.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<AdvertiseContent> AdvertiseContents { get; set; } // AdvertiseContent
        public System.Data.Entity.DbSet<AdvertisePosition> AdvertisePositions { get; set; } // AdvertisePosition
        public System.Data.Entity.DbSet<BaseAdminUser> BaseAdminUsers { get; set; } // BASE_AdminUser
        public System.Data.Entity.DbSet<BaseElmahError> BaseElmahErrors { get; set; } // BASE_ELMAH_Error
        public System.Data.Entity.DbSet<BaseFunc> BaseFuncs { get; set; } // BASE_Func
        public System.Data.Entity.DbSet<BaseRole> BaseRoles { get; set; } // BASE_Role
        public System.Data.Entity.DbSet<BaseRoleFunc> BaseRoleFuncs { get; set; } // BASE_RoleFunc
        public System.Data.Entity.DbSet<BaseUserPreferenceConfig> BaseUserPreferenceConfigs { get; set; } // BASE_UserPreferenceConfig
        public System.Data.Entity.DbSet<BaseUserRole> BaseUserRoles { get; set; } // BASE_UserRole
        public System.Data.Entity.DbSet<BaseUserRoleDataScope> BaseUserRoleDataScopes { get; set; } // BASE_UserRoleDataScope
        public System.Data.Entity.DbSet<BizOperatorMerchantRelation> BizOperatorMerchantRelations { get; set; } // BizOperatorMerchantRelation
        public System.Data.Entity.DbSet<BusinessCategory> BusinessCategories { get; set; } // BusinessCategory
        public System.Data.Entity.DbSet<DevicePushLog> DevicePushLogs { get; set; } // DevicePushLog
        public System.Data.Entity.DbSet<DictionaryConfig> DictionaryConfigs { get; set; } // DictionaryConfig
        public System.Data.Entity.DbSet<GxsCheckInInfo> GxsCheckInInfoes { get; set; } // GXSCheckInInfo
        public System.Data.Entity.DbSet<GxsLineInfo> GxsLineInfoes { get; set; } // GXSLineInfo
        public System.Data.Entity.DbSet<GxsMachine> GxsMachines { get; set; } // GXSMachine
        public System.Data.Entity.DbSet<GxsPosDealInfo> GxsPosDealInfoes { get; set; } // GXSPosDealInfo
        public System.Data.Entity.DbSet<GxsProduct> GxsProducts { get; set; } // GXSProduct
        public System.Data.Entity.DbSet<MerchantApplication> MerchantApplications { get; set; } // MerchantApplication
        public System.Data.Entity.DbSet<OperationCenteApplication> OperationCenteApplications { get; set; } // OperationCenteApplication
        public System.Data.Entity.DbSet<OperationCenter> OperationCenters { get; set; } // OperationCenter
        public System.Data.Entity.DbSet<OperationCenterStatistic> OperationCenterStatistics { get; set; } // OperationCenterStatistics
        public System.Data.Entity.DbSet<PointCommissionBindUser> PointCommissionBindUsers { get; set; } // PointCommissionBindUser
        public System.Data.Entity.DbSet<PointCommissionSale> PointCommissionSales { get; set; } // PointCommissionSale
        public System.Data.Entity.DbSet<PointCommissionSaleSource> PointCommissionSaleSources { get; set; } // PointCommissionSaleSource
        public System.Data.Entity.DbSet<PointCommissionSaleSourceRelation> PointCommissionSaleSourceRelations { get; set; } // PointCommissionSaleSourceRelation
        public System.Data.Entity.DbSet<PointSaleRule> PointSaleRules { get; set; } // PointSaleRules
        public System.Data.Entity.DbSet<PointWholesaleConfig> PointWholesaleConfigs { get; set; } // PointWholesaleConfig
        public System.Data.Entity.DbSet<ProductBarcodeInfo> ProductBarcodeInfoes { get; set; } // ProductBarcodeInfo
        public System.Data.Entity.DbSet<ProductStock> ProductStocks { get; set; } // ProductStock
        public System.Data.Entity.DbSet<RequestRecord> RequestRecords { get; set; } // RequestRecord
        public System.Data.Entity.DbSet<SalesClerk> SalesClerks { get; set; } // SalesClerk
        public System.Data.Entity.DbSet<SalesOutletApprove> SalesOutletApproves { get; set; } // SalesOutletApprove
        public System.Data.Entity.DbSet<SalesOutletConfig> SalesOutletConfigs { get; set; } // SalesOutletConfig
        public System.Data.Entity.DbSet<SalesOutletGpsInfo> SalesOutletGpsInfoes { get; set; } // SalesOutletGPSInfo
        public System.Data.Entity.DbSet<ServiceCode> ServiceCodes { get; set; } // ServiceCode
        public System.Data.Entity.DbSet<ServiceCodeBindRecord> ServiceCodeBindRecords { get; set; } // ServiceCodeBindRecord
        public System.Data.Entity.DbSet<ServiceCodeImportRecord> ServiceCodeImportRecords { get; set; } // ServiceCodeImportRecord
        public System.Data.Entity.DbSet<ServiceCodeOwner> ServiceCodeOwners { get; set; } // ServiceCodeOwner
        public System.Data.Entity.DbSet<SuperMarket> SuperMarkets { get; set; } // SuperMarket
        public System.Data.Entity.DbSet<SuperMarketProduct> SuperMarketProducts { get; set; } // SuperMarketProduct
        public System.Data.Entity.DbSet<SyncAdvertiseContent> SyncAdvertiseContents { get; set; } // SyncAdvertiseContent
        public System.Data.Entity.DbSet<SyncAdvertisePosition> SyncAdvertisePositions { get; set; } // SyncAdvertisePosition
        public System.Data.Entity.DbSet<SyncBizOperatorMerchantRelation> SyncBizOperatorMerchantRelations { get; set; } // SyncBizOperatorMerchantRelation
        public System.Data.Entity.DbSet<SyncBusinessCategory> SyncBusinessCategories { get; set; } // SyncBusinessCategory
        public System.Data.Entity.DbSet<SyncDevicePushLog> SyncDevicePushLogs { get; set; } // SyncDevicePushLog
        public System.Data.Entity.DbSet<SyncGxsCheckInInfo> SyncGxsCheckInInfoes { get; set; } // SyncGXSCheckInInfo
        public System.Data.Entity.DbSet<SyncGxsLineInfo> SyncGxsLineInfoes { get; set; } // SyncGXSLineInfo
        public System.Data.Entity.DbSet<SyncGxsMachine> SyncGxsMachines { get; set; } // SyncGXSMachine
        public System.Data.Entity.DbSet<SyncGxsPosDealInfo> SyncGxsPosDealInfoes { get; set; } // SyncGXSPosDealInfo
        public System.Data.Entity.DbSet<SyncGxsProduct> SyncGxsProducts { get; set; } // SyncGXSProduct
        public System.Data.Entity.DbSet<SyncMerchantApplication> SyncMerchantApplications { get; set; } // SyncMerchantApplication
        public System.Data.Entity.DbSet<SyncMerchantReward> SyncMerchantRewards { get; set; } // SyncMerchantReward
        public System.Data.Entity.DbSet<SyncMerchantRewardHistory> SyncMerchantRewardHistories { get; set; } // SyncMerchantRewardHistory
        public System.Data.Entity.DbSet<SyncPointCommissionBindUser> SyncPointCommissionBindUsers { get; set; } // SyncPointCommissionBindUser
        public System.Data.Entity.DbSet<SyncPointCommissionSale> SyncPointCommissionSales { get; set; } // SyncPointCommissionSale
        public System.Data.Entity.DbSet<SyncPointCommissionSaleSource> SyncPointCommissionSaleSources { get; set; } // SyncPointCommissionSaleSource
        public System.Data.Entity.DbSet<SyncPointCommissionSaleSourceRelation> SyncPointCommissionSaleSourceRelations { get; set; } // SyncPointCommissionSaleSourceRelation
        public System.Data.Entity.DbSet<SyncPointSaleRule> SyncPointSaleRules { get; set; } // SyncPointSaleRules
        public System.Data.Entity.DbSet<SyncPointWholesaleConfig> SyncPointWholesaleConfigs { get; set; } // SyncPointWholesaleConfig
        public System.Data.Entity.DbSet<SyncProductBarcodeInfo> SyncProductBarcodeInfoes { get; set; } // SyncProductBarcodeInfo
        public System.Data.Entity.DbSet<SyncProductStock> SyncProductStocks { get; set; } // SyncProductStock
        public System.Data.Entity.DbSet<SyncSalesClerk> SyncSalesClerks { get; set; } // SyncSalesClerk
        public System.Data.Entity.DbSet<SyncSalesOutletGpsInfo> SyncSalesOutletGpsInfoes { get; set; } // SyncSalesOutletGPSInfo
        public System.Data.Entity.DbSet<SyncServiceCode> SyncServiceCodes { get; set; } // SyncServiceCode
        public System.Data.Entity.DbSet<SyncSuperMarket> SyncSuperMarkets { get; set; } // SyncSuperMarket
        public System.Data.Entity.DbSet<SyncSuperMarketProduct> SyncSuperMarketProducts { get; set; } // SyncSuperMarketProduct
        public System.Data.Entity.DbSet<SyncVendingMachine> SyncVendingMachines { get; set; } // SyncVendingMachine
        public System.Data.Entity.DbSet<SyncVendingMachineProduct> SyncVendingMachineProducts { get; set; } // SyncVendingMachineProduct
        public System.Data.Entity.DbSet<UserOnLine> UserOnLines { get; set; } // UserOnLine
        public System.Data.Entity.DbSet<UserRegistInfo> UserRegistInfoes { get; set; } // UserRegistInfo
        public System.Data.Entity.DbSet<VendingMachine> VendingMachines { get; set; } // VendingMachine
        public System.Data.Entity.DbSet<VendingMachineProduct> VendingMachineProducts { get; set; } // VendingMachineProduct

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AdvertiseContentConfiguration());
            modelBuilder.Configurations.Add(new AdvertisePositionConfiguration());
            modelBuilder.Configurations.Add(new BaseAdminUserConfiguration());
            modelBuilder.Configurations.Add(new BaseElmahErrorConfiguration());
            modelBuilder.Configurations.Add(new BaseFuncConfiguration());
            modelBuilder.Configurations.Add(new BaseRoleConfiguration());
            modelBuilder.Configurations.Add(new BaseRoleFuncConfiguration());
            modelBuilder.Configurations.Add(new BaseUserPreferenceConfigConfiguration());
            modelBuilder.Configurations.Add(new BaseUserRoleConfiguration());
            modelBuilder.Configurations.Add(new BaseUserRoleDataScopeConfiguration());
            modelBuilder.Configurations.Add(new BizOperatorMerchantRelationConfiguration());
            modelBuilder.Configurations.Add(new BusinessCategoryConfiguration());
            modelBuilder.Configurations.Add(new DevicePushLogConfiguration());
            modelBuilder.Configurations.Add(new DictionaryConfigConfiguration());
            modelBuilder.Configurations.Add(new GxsCheckInInfoConfiguration());
            modelBuilder.Configurations.Add(new GxsLineInfoConfiguration());
            modelBuilder.Configurations.Add(new GxsMachineConfiguration());
            modelBuilder.Configurations.Add(new GxsPosDealInfoConfiguration());
            modelBuilder.Configurations.Add(new GxsProductConfiguration());
            modelBuilder.Configurations.Add(new MerchantApplicationConfiguration());
            modelBuilder.Configurations.Add(new OperationCenteApplicationConfiguration());
            modelBuilder.Configurations.Add(new OperationCenterConfiguration());
            modelBuilder.Configurations.Add(new OperationCenterStatisticConfiguration());
            modelBuilder.Configurations.Add(new PointCommissionBindUserConfiguration());
            modelBuilder.Configurations.Add(new PointCommissionSaleConfiguration());
            modelBuilder.Configurations.Add(new PointCommissionSaleSourceConfiguration());
            modelBuilder.Configurations.Add(new PointCommissionSaleSourceRelationConfiguration());
            modelBuilder.Configurations.Add(new PointSaleRuleConfiguration());
            modelBuilder.Configurations.Add(new PointWholesaleConfigConfiguration());
            modelBuilder.Configurations.Add(new ProductBarcodeInfoConfiguration());
            modelBuilder.Configurations.Add(new ProductStockConfiguration());
            modelBuilder.Configurations.Add(new RequestRecordConfiguration());
            modelBuilder.Configurations.Add(new SalesClerkConfiguration());
            modelBuilder.Configurations.Add(new SalesOutletApproveConfiguration());
            modelBuilder.Configurations.Add(new SalesOutletConfigConfiguration());
            modelBuilder.Configurations.Add(new SalesOutletGpsInfoConfiguration());
            modelBuilder.Configurations.Add(new ServiceCodeConfiguration());
            modelBuilder.Configurations.Add(new ServiceCodeBindRecordConfiguration());
            modelBuilder.Configurations.Add(new ServiceCodeImportRecordConfiguration());
            modelBuilder.Configurations.Add(new ServiceCodeOwnerConfiguration());
            modelBuilder.Configurations.Add(new SuperMarketConfiguration());
            modelBuilder.Configurations.Add(new SuperMarketProductConfiguration());
            modelBuilder.Configurations.Add(new SyncAdvertiseContentConfiguration());
            modelBuilder.Configurations.Add(new SyncAdvertisePositionConfiguration());
            modelBuilder.Configurations.Add(new SyncBizOperatorMerchantRelationConfiguration());
            modelBuilder.Configurations.Add(new SyncBusinessCategoryConfiguration());
            modelBuilder.Configurations.Add(new SyncDevicePushLogConfiguration());
            modelBuilder.Configurations.Add(new SyncGxsCheckInInfoConfiguration());
            modelBuilder.Configurations.Add(new SyncGxsLineInfoConfiguration());
            modelBuilder.Configurations.Add(new SyncGxsMachineConfiguration());
            modelBuilder.Configurations.Add(new SyncGxsPosDealInfoConfiguration());
            modelBuilder.Configurations.Add(new SyncGxsProductConfiguration());
            modelBuilder.Configurations.Add(new SyncMerchantApplicationConfiguration());
            modelBuilder.Configurations.Add(new SyncMerchantRewardConfiguration());
            modelBuilder.Configurations.Add(new SyncMerchantRewardHistoryConfiguration());
            modelBuilder.Configurations.Add(new SyncPointCommissionBindUserConfiguration());
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleConfiguration());
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleSourceConfiguration());
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleSourceRelationConfiguration());
            modelBuilder.Configurations.Add(new SyncPointSaleRuleConfiguration());
            modelBuilder.Configurations.Add(new SyncPointWholesaleConfigConfiguration());
            modelBuilder.Configurations.Add(new SyncProductBarcodeInfoConfiguration());
            modelBuilder.Configurations.Add(new SyncProductStockConfiguration());
            modelBuilder.Configurations.Add(new SyncSalesClerkConfiguration());
            modelBuilder.Configurations.Add(new SyncSalesOutletGpsInfoConfiguration());
            modelBuilder.Configurations.Add(new SyncServiceCodeConfiguration());
            modelBuilder.Configurations.Add(new SyncSuperMarketConfiguration());
            modelBuilder.Configurations.Add(new SyncSuperMarketProductConfiguration());
            modelBuilder.Configurations.Add(new SyncVendingMachineConfiguration());
            modelBuilder.Configurations.Add(new SyncVendingMachineProductConfiguration());
            modelBuilder.Configurations.Add(new UserOnLineConfiguration());
            modelBuilder.Configurations.Add(new UserRegistInfoConfiguration());
            modelBuilder.Configurations.Add(new VendingMachineConfiguration());
            modelBuilder.Configurations.Add(new VendingMachineProductConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AdvertiseContentConfiguration(schema));
            modelBuilder.Configurations.Add(new AdvertisePositionConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseAdminUserConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseElmahErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseFuncConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseRoleFuncConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseUserPreferenceConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseUserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new BaseUserRoleDataScopeConfiguration(schema));
            modelBuilder.Configurations.Add(new BizOperatorMerchantRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new DevicePushLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DictionaryConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new GxsCheckInInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new GxsLineInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new GxsMachineConfiguration(schema));
            modelBuilder.Configurations.Add(new GxsPosDealInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new GxsProductConfiguration(schema));
            modelBuilder.Configurations.Add(new MerchantApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationCenteApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationCenterConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationCenterStatisticConfiguration(schema));
            modelBuilder.Configurations.Add(new PointCommissionBindUserConfiguration(schema));
            modelBuilder.Configurations.Add(new PointCommissionSaleConfiguration(schema));
            modelBuilder.Configurations.Add(new PointCommissionSaleSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new PointCommissionSaleSourceRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new PointSaleRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new PointWholesaleConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductBarcodeInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductStockConfiguration(schema));
            modelBuilder.Configurations.Add(new RequestRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesClerkConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOutletApproveConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOutletConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOutletGpsInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceCodeBindRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceCodeImportRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceCodeOwnerConfiguration(schema));
            modelBuilder.Configurations.Add(new SuperMarketConfiguration(schema));
            modelBuilder.Configurations.Add(new SuperMarketProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncAdvertiseContentConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncAdvertisePositionConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncBizOperatorMerchantRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncBusinessCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncDevicePushLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncGxsCheckInInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncGxsLineInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncGxsMachineConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncGxsPosDealInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncGxsProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncMerchantApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncMerchantRewardConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncMerchantRewardHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointCommissionBindUserConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointCommissionSaleSourceRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointSaleRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncPointWholesaleConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncProductBarcodeInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncProductStockConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncSalesClerkConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncSalesOutletGpsInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncServiceCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncSuperMarketConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncSuperMarketProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncVendingMachineConfiguration(schema));
            modelBuilder.Configurations.Add(new SyncVendingMachineProductConfiguration(schema));
            modelBuilder.Configurations.Add(new UserOnLineConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRegistInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new VendingMachineConfiguration(schema));
            modelBuilder.Configurations.Add(new VendingMachineProductConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int AddOperationCenterStatistics(System.Guid? uniqueId, System.Guid? operationCenterUniqueId, int? statisticsType, decimal? supermarketRevenueIncrease, int? storeOwnedMemberIncrease, int? storeIncrease, int? supermarketIncrease, System.DateTime? statisticsDateTime)
        {
            var uniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = uniqueId.GetValueOrDefault() };
            if (!uniqueId.HasValue)
                uniqueIdParam.Value = System.DBNull.Value;

            var operationCenterUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OperationCenterUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = operationCenterUniqueId.GetValueOrDefault() };
            if (!operationCenterUniqueId.HasValue)
                operationCenterUniqueIdParam.Value = System.DBNull.Value;

            var statisticsTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statisticsType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statisticsType.HasValue)
                statisticsTypeParam.Value = System.DBNull.Value;

            var supermarketRevenueIncreaseParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SupermarketRevenueIncrease", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = supermarketRevenueIncrease.GetValueOrDefault(), Precision = 18, Scale = 5 };
            if (!supermarketRevenueIncrease.HasValue)
                supermarketRevenueIncreaseParam.Value = System.DBNull.Value;

            var storeOwnedMemberIncreaseParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StoreOwnedMemberIncrease", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = storeOwnedMemberIncrease.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!storeOwnedMemberIncrease.HasValue)
                storeOwnedMemberIncreaseParam.Value = System.DBNull.Value;

            var storeIncreaseParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StoreIncrease", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = storeIncrease.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!storeIncrease.HasValue)
                storeIncreaseParam.Value = System.DBNull.Value;

            var supermarketIncreaseParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SupermarketIncrease", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = supermarketIncrease.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!supermarketIncrease.HasValue)
                supermarketIncreaseParam.Value = System.DBNull.Value;

            var statisticsDateTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsDateTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = statisticsDateTime.GetValueOrDefault() };
            if (!statisticsDateTime.HasValue)
                statisticsDateTimeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddOperationCenterStatistics] @UniqueID, @OperationCenterUniqueID, @StatisticsType, @SupermarketRevenueIncrease, @StoreOwnedMemberIncrease, @StoreIncrease, @SupermarketIncrease, @StatisticsDateTime", uniqueIdParam, operationCenterUniqueIdParam, statisticsTypeParam, supermarketRevenueIncreaseParam, storeOwnedMemberIncreaseParam, storeIncreaseParam, supermarketIncreaseParam, statisticsDateTimeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int BatchBindServiceCode(string ownerCode, int? quantity, int? type, string userName, string ownerMobile, System.Guid? ownerUniqueId, string salesOrderCode, System.Guid? importUserUniqueId, System.DateTime? salesOrderActiveTime, decimal? salesOrderAmount, int? salesItemQuantity, decimal? unitPrice, string saleItemName, System.DateTime? currentTime, string remark, out int? result)
        {
            var ownerCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OwnerCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ownerCode, Size = 50 };
            if (ownerCodeParam.Value == null)
                ownerCodeParam.Value = System.DBNull.Value;

            var quantityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Quantity", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quantity.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quantity.HasValue)
                quantityParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 100 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var ownerMobileParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OwnerMobile", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ownerMobile, Size = 100 };
            if (ownerMobileParam.Value == null)
                ownerMobileParam.Value = System.DBNull.Value;

            var ownerUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OwnerUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = ownerUniqueId.GetValueOrDefault() };
            if (!ownerUniqueId.HasValue)
                ownerUniqueIdParam.Value = System.DBNull.Value;

            var salesOrderCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesOrderCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = salesOrderCode, Size = 100 };
            if (salesOrderCodeParam.Value == null)
                salesOrderCodeParam.Value = System.DBNull.Value;

            var importUserUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ImportUserUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = importUserUniqueId.GetValueOrDefault() };
            if (!importUserUniqueId.HasValue)
                importUserUniqueIdParam.Value = System.DBNull.Value;

            var salesOrderActiveTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesOrderActiveTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = salesOrderActiveTime.GetValueOrDefault() };
            if (!salesOrderActiveTime.HasValue)
                salesOrderActiveTimeParam.Value = System.DBNull.Value;

            var salesOrderAmountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesOrderAmount", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = salesOrderAmount.GetValueOrDefault(), Precision = 18, Scale = 0 };
            if (!salesOrderAmount.HasValue)
                salesOrderAmountParam.Value = System.DBNull.Value;

            var salesItemQuantityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesItemQuantity", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = salesItemQuantity.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!salesItemQuantity.HasValue)
                salesItemQuantityParam.Value = System.DBNull.Value;

            var unitPriceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UnitPrice", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = unitPrice.GetValueOrDefault(), Precision = 18, Scale = 0 };
            if (!unitPrice.HasValue)
                unitPriceParam.Value = System.DBNull.Value;

            var saleItemNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SaleItemName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = saleItemName, Size = 100 };
            if (saleItemNameParam.Value == null)
                saleItemNameParam.Value = System.DBNull.Value;

            var currentTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTime.GetValueOrDefault() };
            if (!currentTime.HasValue)
                currentTimeParam.Value = System.DBNull.Value;

            var remarkParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Remark", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = remark, Size = 500 };
            if (remarkParam.Value == null)
                remarkParam.Value = System.DBNull.Value;

            var resultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Result", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[BatchBindServiceCode] @OwnerCode, @Quantity, @Type, @UserName, @OwnerMobile, @OwnerUniqueID, @SalesOrderCode, @ImportUserUniqueID, @SalesOrderActiveTime, @SalesOrderAmount, @SalesItemQuantity, @UnitPrice, @SaleItemName, @CurrentTime, @Remark, @Result OUTPUT", ownerCodeParam, quantityParam, typeParam, userNameParam, ownerMobileParam, ownerUniqueIdParam, salesOrderCodeParam, importUserUniqueIdParam, salesOrderActiveTimeParam, salesOrderAmountParam, salesItemQuantityParam, unitPriceParam, saleItemNameParam, currentTimeParam, remarkParam, resultParam, procResultParam);
            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int) procResultParam.Value;
        }

        public int ClearServiceCodeByMerchantApplicationFaild(int? timeOutCancel, out int? result)
        {
            var timeOutCancelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeOutCancel", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeOutCancel.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeOutCancel.HasValue)
                timeOutCancelParam.Value = System.DBNull.Value;

            var resultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Result", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ClearServiceCodeByMerchantApplicationFaild] @TimeOutCancel, @Result OUTPUT", timeOutCancelParam, resultParam, procResultParam);
            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int) procResultParam.Value;
        }

        public int ClearServiceCodeByRelevanceUniqueId(int? timeOutCancel, out int? result)
        {
            var timeOutCancelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeOutCancel", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeOutCancel.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeOutCancel.HasValue)
                timeOutCancelParam.Value = System.DBNull.Value;

            var resultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Result", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ClearServiceCodeByRelevanceUniqueID] @TimeOutCancel, @Result OUTPUT", timeOutCancelParam, resultParam, procResultParam);
            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetAllStoreReturnModel> GetAllStore()
        {
            int procResult;
            return GetAllStore(out procResult);
        }

        public System.Collections.Generic.List<GetAllStoreReturnModel> GetAllStore(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllStoreReturnModel>("EXEC @procResult = [dbo].[GetAllStore] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllStoreReturnModel>> GetAllStoreAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllStoreReturnModel>("EXEC [dbo].[GetAllStore] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllSupermarketReturnModel> GetAllSupermarket()
        {
            int procResult;
            return GetAllSupermarket(out procResult);
        }

        public System.Collections.Generic.List<GetAllSupermarketReturnModel> GetAllSupermarket(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllSupermarketReturnModel>("EXEC @procResult = [dbo].[GetAllSupermarket] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSupermarketReturnModel>> GetAllSupermarketAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllSupermarketReturnModel>("EXEC [dbo].[GetAllSupermarket] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel> GetDictionaryConfigByCode(string code, int? type)
        {
            int procResult;
            return GetDictionaryConfigByCode(code, type, out procResult);
        }

        public System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel> GetDictionaryConfigByCode(string code, int? type, out int procResult)
        {
            var codeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Code", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = code, Size = 50 };
            if (codeParam.Value == null)
                codeParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDictionaryConfigByCodeReturnModel>("EXEC @procResult = [dbo].[GetDictionaryConfigByCode] @Code, @Type", codeParam, typeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel>> GetDictionaryConfigByCodeAsync(string code, int? type)
        {
            var codeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Code", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = code, Size = 50 };
            if (codeParam.Value == null)
                codeParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDictionaryConfigByCodeReturnModel>("EXEC [dbo].[GetDictionaryConfigByCode] @Code, @Type", codeParam, typeParam).ToListAsync();

            return procResultData;
        }

        public GetProductsByKeywords1ReturnModel GetProductsByKeywords1(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng)
        {
            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var latParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lat", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lat.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lat.HasValue)
                latParam.Value = System.DBNull.Value;

            var lngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lng", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lng.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lng.HasValue)
                lngParam.Value = System.DBNull.Value;

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            var procResultData = new GetProductsByKeywords1ReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetProductsByKeywords1]";
            cmd.Parameters.Add(pagesizeParam);
            cmd.Parameters.Add(pageIndexParam);
            cmd.Parameters.Add(countParam);
            cmd.Parameters.Add(latParam);
            cmd.Parameters.Add(lngParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetProductsByKeywords1ReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetProductsByKeywords1ReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public GetSalesOutletsAndProductsReturnModel GetSalesOutletsAndProducts(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng)
        {
            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var latParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lat", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lat.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lat.HasValue)
                latParam.Value = System.DBNull.Value;

            var lngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lng", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lng.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lng.HasValue)
                lngParam.Value = System.DBNull.Value;

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            var procResultData = new GetSalesOutletsAndProductsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetSalesOutletsAndProducts]";
            cmd.Parameters.Add(pagesizeParam);
            cmd.Parameters.Add(pageIndexParam);
            cmd.Parameters.Add(countParam);
            cmd.Parameters.Add(latParam);
            cmd.Parameters.Add(lngParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetSalesOutletsAndProductsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetSalesOutletsAndProductsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public GetSalesOutletsAndProductsByKeywordsReturnModel GetSalesOutletsAndProductsByKeywords(int? pagesize, int? pageIndex, out int? count, string keywords, float? lat, float? lng)
        {
            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var keywordsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keywords", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keywords, Size = 200 };
            if (keywordsParam.Value == null)
                keywordsParam.Value = System.DBNull.Value;

            var latParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lat", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lat.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lat.HasValue)
                latParam.Value = System.DBNull.Value;

            var lngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lng", SqlDbType = System.Data.SqlDbType.Real, Direction = System.Data.ParameterDirection.Input, Value = lng.GetValueOrDefault(), Precision = 24, Scale = 0 };
            if (!lng.HasValue)
                lngParam.Value = System.DBNull.Value;

            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            var procResultData = new GetSalesOutletsAndProductsByKeywordsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetSalesOutletsAndProductsByKeywords]";
            cmd.Parameters.Add(pagesizeParam);
            cmd.Parameters.Add(pageIndexParam);
            cmd.Parameters.Add(countParam);
            cmd.Parameters.Add(keywordsParam);
            cmd.Parameters.Add(latParam);
            cmd.Parameters.Add(lngParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetSalesOutletsAndProductsByKeywordsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetSalesOutletsAndProductsByKeywordsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int GetSalesOutletsByKeywords(int? pageIndex, int? pagesize, out int? count, string keywords, string salesOutletType, bool? isSupportDelivery, string businessCategoryIDs, decimal? maxLng, decimal? minLng, decimal? maxLat, decimal? minLat, decimal? currtLng, decimal? currtLat)
        {
            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var keywordsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keywords", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keywords, Size = 200 };
            if (keywordsParam.Value == null)
                keywordsParam.Value = System.DBNull.Value;

            var salesOutletTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesOutletType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = salesOutletType, Size = 20 };
            if (salesOutletTypeParam.Value == null)
                salesOutletTypeParam.Value = System.DBNull.Value;

            var isSupportDeliveryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsSupportDelivery", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isSupportDelivery.GetValueOrDefault() };
            if (!isSupportDelivery.HasValue)
                isSupportDeliveryParam.Value = System.DBNull.Value;

            var businessCategoryIDsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessCategoryIDs", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = businessCategoryIDs, Size = 4000 };
            if (businessCategoryIDsParam.Value == null)
                businessCategoryIDsParam.Value = System.DBNull.Value;

            var maxLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = maxLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!maxLng.HasValue)
                maxLngParam.Value = System.DBNull.Value;

            var minLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MinLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = minLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!minLng.HasValue)
                minLngParam.Value = System.DBNull.Value;

            var maxLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = maxLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!maxLat.HasValue)
                maxLatParam.Value = System.DBNull.Value;

            var minLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MinLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = minLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!minLat.HasValue)
                minLatParam.Value = System.DBNull.Value;

            var currtLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrtLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = currtLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!currtLng.HasValue)
                currtLngParam.Value = System.DBNull.Value;

            var currtLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrtLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = currtLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!currtLat.HasValue)
                currtLatParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetSalesOutletsByKeywords] @PageIndex, @Pagesize, @Count OUTPUT, @Keywords, @SalesOutletType, @IsSupportDelivery, @BusinessCategoryIDs, @MaxLng, @MinLng, @MaxLat, @MinLat, @CurrtLng, @CurrtLat", pageIndexParam, pagesizeParam, countParam, keywordsParam, salesOutletTypeParam, isSupportDeliveryParam, businessCategoryIDsParam, maxLngParam, minLngParam, maxLatParam, minLatParam, currtLngParam, currtLatParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public int GetSalesOutletsByKeywords1(int? pageIndex, int? pagesize, out int? count, string keywords, string salesOutletType, decimal? maxLng, decimal? minLng, decimal? maxLat, decimal? minLat, decimal? currtLng, decimal? currtLat)
        {
            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var keywordsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keywords", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keywords, Size = 200 };
            if (keywordsParam.Value == null)
                keywordsParam.Value = System.DBNull.Value;

            var salesOutletTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SalesOutletType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = salesOutletType, Size = 20 };
            if (salesOutletTypeParam.Value == null)
                salesOutletTypeParam.Value = System.DBNull.Value;

            var maxLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = maxLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!maxLng.HasValue)
                maxLngParam.Value = System.DBNull.Value;

            var minLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MinLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = minLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!minLng.HasValue)
                minLngParam.Value = System.DBNull.Value;

            var maxLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = maxLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!maxLat.HasValue)
                maxLatParam.Value = System.DBNull.Value;

            var minLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MinLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = minLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!minLat.HasValue)
                minLatParam.Value = System.DBNull.Value;

            var currtLngParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrtLng", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = currtLng.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!currtLng.HasValue)
                currtLngParam.Value = System.DBNull.Value;

            var currtLatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrtLat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = currtLat.GetValueOrDefault(), Precision = 18, Scale = 8 };
            if (!currtLat.HasValue)
                currtLatParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetSalesOutletsByKeywords1] @PageIndex, @Pagesize, @Count OUTPUT, @Keywords, @SalesOutletType, @MaxLng, @MinLng, @MaxLat, @MinLat, @CurrtLng, @CurrtLat", pageIndexParam, pagesizeParam, countParam, keywordsParam, salesOutletTypeParam, maxLngParam, minLngParam, maxLatParam, minLatParam, currtLngParam, currtLatParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetServiceCodeByCodeReturnModel> GetServiceCodeByCode(int? pagesize, int? pageIndex, out int? count, string ownerCode, string mobile, string code, bool? isBind, System.DateTime? startTime, System.DateTime? endTime, string operationName, int? approveStatus)
        {
            int procResult;
            return GetServiceCodeByCode(pagesize, pageIndex, out count, ownerCode, mobile, code, isBind, startTime, endTime, operationName, approveStatus, out procResult);
        }

        public System.Collections.Generic.List<GetServiceCodeByCodeReturnModel> GetServiceCodeByCode(int? pagesize, int? pageIndex, out int? count, string ownerCode, string mobile, string code, bool? isBind, System.DateTime? startTime, System.DateTime? endTime, string operationName, int? approveStatus, out int procResult)
        {
            var pagesizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Pagesize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var ownerCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OwnerCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ownerCode, Size = 100 };
            if (ownerCodeParam.Value == null)
                ownerCodeParam.Value = System.DBNull.Value;

            var mobileParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mobile", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = mobile, Size = 100 };
            if (mobileParam.Value == null)
                mobileParam.Value = System.DBNull.Value;

            var codeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Code", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = code, Size = 100 };
            if (codeParam.Value == null)
                codeParam.Value = System.DBNull.Value;

            var isBindParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsBind", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isBind.GetValueOrDefault() };
            if (!isBind.HasValue)
                isBindParam.Value = System.DBNull.Value;

            var startTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startTime.GetValueOrDefault() };
            if (!startTime.HasValue)
                startTimeParam.Value = System.DBNull.Value;

            var endTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = endTime.GetValueOrDefault() };
            if (!endTime.HasValue)
                endTimeParam.Value = System.DBNull.Value;

            var operationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OperationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = operationName, Size = 100 };
            if (operationNameParam.Value == null)
                operationNameParam.Value = System.DBNull.Value;

            var approveStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApproveStatus", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = approveStatus.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approveStatus.HasValue)
                approveStatusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetServiceCodeByCodeReturnModel>("EXEC @procResult = [dbo].[GetServiceCodeByCode] @Pagesize, @PageIndex, @Count OUTPUT, @OwnerCode, @Mobile, @Code, @IsBind, @StartTime, @EndTime, @OperationName, @ApproveStatus", pagesizeParam, pageIndexParam, countParam, ownerCodeParam, mobileParam, codeParam, isBindParam, startTimeParam, endTimeParam, operationNameParam, approveStatusParam, procResultParam).ToList();
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel> ServiceGetPointSaleRulesByStatus(int? status)
        {
            int procResult;
            return ServiceGetPointSaleRulesByStatus(status, out procResult);
        }

        public System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel> ServiceGetPointSaleRulesByStatus(int? status, out int procResult)
        {
            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ServiceGetPointSaleRulesByStatusReturnModel>("EXEC @procResult = [dbo].[ServiceGetPointSaleRulesByStatus] @Status", statusParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel>> ServiceGetPointSaleRulesByStatusAsync(int? status)
        {
            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ServiceGetPointSaleRulesByStatusReturnModel>("EXEC [dbo].[ServiceGetPointSaleRulesByStatus] @Status", statusParam).ToListAsync();

            return procResultData;
        }

        public int ServiceUpdatePointSaleRulesStatus(int? oldStatus, int? newStatus)
        {
            var oldStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OldStatus", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = oldStatus.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!oldStatus.HasValue)
                oldStatusParam.Value = System.DBNull.Value;

            var newStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewStatus", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = newStatus.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!newStatus.HasValue)
                newStatusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ServiceUpdatePointSaleRulesStatus] @OldStatus, @NewStatus", oldStatusParam, newStatusParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ServiceUpdateStockByUniqueId(System.Guid? productUniqueId, bool? isAdd, int? storck)
        {
            var productUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = productUniqueId.GetValueOrDefault() };
            if (!productUniqueId.HasValue)
                productUniqueIdParam.Value = System.DBNull.Value;

            var isAddParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsAdd", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isAdd.GetValueOrDefault() };
            if (!isAdd.HasValue)
                isAddParam.Value = System.DBNull.Value;

            var storckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Storck", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = storck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!storck.HasValue)
                storckParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ServiceUpdateStockByUniqueID] @ProductUniqueID, @IsAdd, @Storck", productUniqueIdParam, isAddParam, storckParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public SuperMarketStatisticsReturnModel SuperMarketStatistics(System.DateTime? startTime, System.DateTime? endTime)
        {
            var startTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartTime", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startTime.GetValueOrDefault() };
            if (!startTime.HasValue)
                startTimeParam.Value = System.DBNull.Value;

            var endTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndTime", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endTime.GetValueOrDefault() };
            if (!endTime.HasValue)
                endTimeParam.Value = System.DBNull.Value;


            var procResultData = new SuperMarketStatisticsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[SuperMarketStatistics]";
            cmd.Parameters.Add(startTimeParam);
            cmd.Parameters.Add(endTimeParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SuperMarketStatisticsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<SuperMarketStatisticsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<SuperMarketStatisticsReturnModel> SuperMarketStatisticsAsync(System.DateTime? startTime, System.DateTime? endTime)
        {
            var startTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartTime", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startTime.GetValueOrDefault() };
            if (!startTime.HasValue)
                startTimeParam.Value = System.DBNull.Value;

            var endTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndTime", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endTime.GetValueOrDefault() };
            if (!endTime.HasValue)
                endTimeParam.Value = System.DBNull.Value;


            var procResultData = new SuperMarketStatisticsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[SuperMarketStatistics]";
            cmd.Parameters.Add(startTimeParam);
            cmd.Parameters.Add(endTimeParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SuperMarketStatisticsReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<SuperMarketStatisticsReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int UpdateServiceCodeByRelevanceUniqueId(System.Guid? relevanceUniqueId)
        {
            var relevanceUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RelevanceUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = relevanceUniqueId.GetValueOrDefault() };
            if (!relevanceUniqueId.HasValue)
                relevanceUniqueIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UpdateServiceCodeByRelevanceUniqueID] @RelevanceUniqueID", relevanceUniqueIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UpdateServiceRelevanceUniqueIdByOwnerCode(System.Guid? relevanceUniqueId, int? number, string ownerCode)
        {
            var relevanceUniqueIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RelevanceUniqueID", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = relevanceUniqueId.GetValueOrDefault() };
            if (!relevanceUniqueId.HasValue)
                relevanceUniqueIdParam.Value = System.DBNull.Value;

            var numberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Number", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = number.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!number.HasValue)
                numberParam.Value = System.DBNull.Value;

            var ownerCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OwnerCode", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ownerCode, Size = 100 };
            if (ownerCodeParam.Value == null)
                ownerCodeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UpdateServiceRelevanceUniqueIDByOwnerCode] @RelevanceUniqueID, @Number, @OwnerCode", relevanceUniqueIdParam, numberParam, ownerCodeParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
