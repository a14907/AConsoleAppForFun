// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ConsoleApp
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.32.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<AdvertiseContent> AdvertiseContents { get; set; }
        public System.Data.Entity.DbSet<AdvertisePosition> AdvertisePositions { get; set; }
        public System.Data.Entity.DbSet<BaseAdminUser> BaseAdminUsers { get; set; }
        public System.Data.Entity.DbSet<BaseElmahError> BaseElmahErrors { get; set; }
        public System.Data.Entity.DbSet<BaseFunc> BaseFuncs { get; set; }
        public System.Data.Entity.DbSet<BaseRole> BaseRoles { get; set; }
        public System.Data.Entity.DbSet<BaseRoleFunc> BaseRoleFuncs { get; set; }
        public System.Data.Entity.DbSet<BaseUserPreferenceConfig> BaseUserPreferenceConfigs { get; set; }
        public System.Data.Entity.DbSet<BaseUserRole> BaseUserRoles { get; set; }
        public System.Data.Entity.DbSet<BaseUserRoleDataScope> BaseUserRoleDataScopes { get; set; }
        public System.Data.Entity.DbSet<BizOperatorMerchantRelation> BizOperatorMerchantRelations { get; set; }
        public System.Data.Entity.DbSet<BusinessCategory> BusinessCategories { get; set; }
        public System.Data.Entity.DbSet<DevicePushLog> DevicePushLogs { get; set; }
        public System.Data.Entity.DbSet<DictionaryConfig> DictionaryConfigs { get; set; }
        public System.Data.Entity.DbSet<GxsCheckInInfo> GxsCheckInInfoes { get; set; }
        public System.Data.Entity.DbSet<GxsLineInfo> GxsLineInfoes { get; set; }
        public System.Data.Entity.DbSet<GxsMachine> GxsMachines { get; set; }
        public System.Data.Entity.DbSet<GxsPosDealInfo> GxsPosDealInfoes { get; set; }
        public System.Data.Entity.DbSet<GxsProduct> GxsProducts { get; set; }
        public System.Data.Entity.DbSet<MerchantApplication> MerchantApplications { get; set; }
        public System.Data.Entity.DbSet<OperationCenteApplication> OperationCenteApplications { get; set; }
        public System.Data.Entity.DbSet<OperationCenter> OperationCenters { get; set; }
        public System.Data.Entity.DbSet<OperationCenterStatistic> OperationCenterStatistics { get; set; }
        public System.Data.Entity.DbSet<PointCommissionBindUser> PointCommissionBindUsers { get; set; }
        public System.Data.Entity.DbSet<PointCommissionSale> PointCommissionSales { get; set; }
        public System.Data.Entity.DbSet<PointCommissionSaleSource> PointCommissionSaleSources { get; set; }
        public System.Data.Entity.DbSet<PointCommissionSaleSourceRelation> PointCommissionSaleSourceRelations { get; set; }
        public System.Data.Entity.DbSet<PointSaleRule> PointSaleRules { get; set; }
        public System.Data.Entity.DbSet<PointWholesaleConfig> PointWholesaleConfigs { get; set; }
        public System.Data.Entity.DbSet<ProductBarcodeInfo> ProductBarcodeInfoes { get; set; }
        public System.Data.Entity.DbSet<ProductStock> ProductStocks { get; set; }
        public System.Data.Entity.DbSet<RequestRecord> RequestRecords { get; set; }
        public System.Data.Entity.DbSet<SalesClerk> SalesClerks { get; set; }
        public System.Data.Entity.DbSet<SalesOutletApprove> SalesOutletApproves { get; set; }
        public System.Data.Entity.DbSet<SalesOutletConfig> SalesOutletConfigs { get; set; }
        public System.Data.Entity.DbSet<SalesOutletGpsInfo> SalesOutletGpsInfoes { get; set; }
        public System.Data.Entity.DbSet<ServiceCode> ServiceCodes { get; set; }
        public System.Data.Entity.DbSet<ServiceCodeBindRecord> ServiceCodeBindRecords { get; set; }
        public System.Data.Entity.DbSet<ServiceCodeImportRecord> ServiceCodeImportRecords { get; set; }
        public System.Data.Entity.DbSet<ServiceCodeOwner> ServiceCodeOwners { get; set; }
        public System.Data.Entity.DbSet<SuperMarket> SuperMarkets { get; set; }
        public System.Data.Entity.DbSet<SuperMarketProduct> SuperMarketProducts { get; set; }
        public System.Data.Entity.DbSet<SyncAdvertiseContent> SyncAdvertiseContents { get; set; }
        public System.Data.Entity.DbSet<SyncAdvertisePosition> SyncAdvertisePositions { get; set; }
        public System.Data.Entity.DbSet<SyncBizOperatorMerchantRelation> SyncBizOperatorMerchantRelations { get; set; }
        public System.Data.Entity.DbSet<SyncBusinessCategory> SyncBusinessCategories { get; set; }
        public System.Data.Entity.DbSet<SyncDevicePushLog> SyncDevicePushLogs { get; set; }
        public System.Data.Entity.DbSet<SyncGxsCheckInInfo> SyncGxsCheckInInfoes { get; set; }
        public System.Data.Entity.DbSet<SyncGxsLineInfo> SyncGxsLineInfoes { get; set; }
        public System.Data.Entity.DbSet<SyncGxsMachine> SyncGxsMachines { get; set; }
        public System.Data.Entity.DbSet<SyncGxsPosDealInfo> SyncGxsPosDealInfoes { get; set; }
        public System.Data.Entity.DbSet<SyncGxsProduct> SyncGxsProducts { get; set; }
        public System.Data.Entity.DbSet<SyncMerchantApplication> SyncMerchantApplications { get; set; }
        public System.Data.Entity.DbSet<SyncMerchantReward> SyncMerchantRewards { get; set; }
        public System.Data.Entity.DbSet<SyncMerchantRewardHistory> SyncMerchantRewardHistories { get; set; }
        public System.Data.Entity.DbSet<SyncPointCommissionBindUser> SyncPointCommissionBindUsers { get; set; }
        public System.Data.Entity.DbSet<SyncPointCommissionSale> SyncPointCommissionSales { get; set; }
        public System.Data.Entity.DbSet<SyncPointCommissionSaleSource> SyncPointCommissionSaleSources { get; set; }
        public System.Data.Entity.DbSet<SyncPointCommissionSaleSourceRelation> SyncPointCommissionSaleSourceRelations { get; set; }
        public System.Data.Entity.DbSet<SyncPointSaleRule> SyncPointSaleRules { get; set; }
        public System.Data.Entity.DbSet<SyncPointWholesaleConfig> SyncPointWholesaleConfigs { get; set; }
        public System.Data.Entity.DbSet<SyncProductBarcodeInfo> SyncProductBarcodeInfoes { get; set; }
        public System.Data.Entity.DbSet<SyncProductStock> SyncProductStocks { get; set; }
        public System.Data.Entity.DbSet<SyncSalesClerk> SyncSalesClerks { get; set; }
        public System.Data.Entity.DbSet<SyncSalesOutletGpsInfo> SyncSalesOutletGpsInfoes { get; set; }
        public System.Data.Entity.DbSet<SyncServiceCode> SyncServiceCodes { get; set; }
        public System.Data.Entity.DbSet<SyncSuperMarket> SyncSuperMarkets { get; set; }
        public System.Data.Entity.DbSet<SyncSuperMarketProduct> SyncSuperMarketProducts { get; set; }
        public System.Data.Entity.DbSet<SyncVendingMachine> SyncVendingMachines { get; set; }
        public System.Data.Entity.DbSet<SyncVendingMachineProduct> SyncVendingMachineProducts { get; set; }
        public System.Data.Entity.DbSet<UserOnLine> UserOnLines { get; set; }
        public System.Data.Entity.DbSet<UserRegistInfo> UserRegistInfoes { get; set; }
        public System.Data.Entity.DbSet<VendingMachine> VendingMachines { get; set; }
        public System.Data.Entity.DbSet<VendingMachineProduct> VendingMachineProducts { get; set; }

        public FakeMyDbContext()
        {
            AdvertiseContents = new FakeDbSet<AdvertiseContent>("UniqueId");
            AdvertisePositions = new FakeDbSet<AdvertisePosition>("UniqueId");
            BaseAdminUsers = new FakeDbSet<BaseAdminUser>("Id");
            BaseElmahErrors = new FakeDbSet<BaseElmahError>("ErrorId");
            BaseFuncs = new FakeDbSet<BaseFunc>("Id");
            BaseRoles = new FakeDbSet<BaseRole>("Id");
            BaseRoleFuncs = new FakeDbSet<BaseRoleFunc>("Id");
            BaseUserPreferenceConfigs = new FakeDbSet<BaseUserPreferenceConfig>("Id");
            BaseUserRoles = new FakeDbSet<BaseUserRole>("Id");
            BaseUserRoleDataScopes = new FakeDbSet<BaseUserRoleDataScope>("Id");
            BizOperatorMerchantRelations = new FakeDbSet<BizOperatorMerchantRelation>("UniqueId");
            BusinessCategories = new FakeDbSet<BusinessCategory>("UniqueId");
            DevicePushLogs = new FakeDbSet<DevicePushLog>("UniqueId");
            DictionaryConfigs = new FakeDbSet<DictionaryConfig>("Id");
            GxsCheckInInfoes = new FakeDbSet<GxsCheckInInfo>("UniqueId");
            GxsLineInfoes = new FakeDbSet<GxsLineInfo>("UniqueId");
            GxsMachines = new FakeDbSet<GxsMachine>("UniqueId");
            GxsPosDealInfoes = new FakeDbSet<GxsPosDealInfo>("UniqueId");
            GxsProducts = new FakeDbSet<GxsProduct>("UniqueId");
            MerchantApplications = new FakeDbSet<MerchantApplication>("UniqueId");
            OperationCenteApplications = new FakeDbSet<OperationCenteApplication>("UniqueId");
            OperationCenters = new FakeDbSet<OperationCenter>("UniqueId");
            OperationCenterStatistics = new FakeDbSet<OperationCenterStatistic>("UniqueId");
            PointCommissionBindUsers = new FakeDbSet<PointCommissionBindUser>("UniqueId");
            PointCommissionSales = new FakeDbSet<PointCommissionSale>("UniqueId");
            PointCommissionSaleSources = new FakeDbSet<PointCommissionSaleSource>("UniqueId");
            PointCommissionSaleSourceRelations = new FakeDbSet<PointCommissionSaleSourceRelation>("UniqueId");
            PointSaleRules = new FakeDbSet<PointSaleRule>("UniqueId");
            PointWholesaleConfigs = new FakeDbSet<PointWholesaleConfig>("UniqueId");
            ProductBarcodeInfoes = new FakeDbSet<ProductBarcodeInfo>("UniqueId");
            ProductStocks = new FakeDbSet<ProductStock>("UniqueId");
            RequestRecords = new FakeDbSet<RequestRecord>("Id");
            SalesClerks = new FakeDbSet<SalesClerk>("UniqueId", "Id");
            SalesOutletApproves = new FakeDbSet<SalesOutletApprove>("UniqueId");
            SalesOutletConfigs = new FakeDbSet<SalesOutletConfig>("UniqueId");
            SalesOutletGpsInfoes = new FakeDbSet<SalesOutletGpsInfo>("UniqueId");
            ServiceCodes = new FakeDbSet<ServiceCode>("UniqueId");
            ServiceCodeBindRecords = new FakeDbSet<ServiceCodeBindRecord>("UniqueId");
            ServiceCodeImportRecords = new FakeDbSet<ServiceCodeImportRecord>("UniqueId");
            ServiceCodeOwners = new FakeDbSet<ServiceCodeOwner>("UniqueId");
            SuperMarkets = new FakeDbSet<SuperMarket>("UniqueId");
            SuperMarketProducts = new FakeDbSet<SuperMarketProduct>("UniqueId");
            SyncAdvertiseContents = new FakeDbSet<SyncAdvertiseContent>("Id", "UniqueId");
            SyncAdvertisePositions = new FakeDbSet<SyncAdvertisePosition>("Id", "UniqueId");
            SyncBizOperatorMerchantRelations = new FakeDbSet<SyncBizOperatorMerchantRelation>("UniqueId", "Id");
            SyncBusinessCategories = new FakeDbSet<SyncBusinessCategory>("UniqueId");
            SyncDevicePushLogs = new FakeDbSet<SyncDevicePushLog>("UniqueId", "Id");
            SyncGxsCheckInInfoes = new FakeDbSet<SyncGxsCheckInInfo>("UniqueId");
            SyncGxsLineInfoes = new FakeDbSet<SyncGxsLineInfo>("Id", "UniqueId");
            SyncGxsMachines = new FakeDbSet<SyncGxsMachine>("Id", "UniqueId");
            SyncGxsPosDealInfoes = new FakeDbSet<SyncGxsPosDealInfo>("UniqueId");
            SyncGxsProducts = new FakeDbSet<SyncGxsProduct>("Id", "UniqueId");
            SyncMerchantApplications = new FakeDbSet<SyncMerchantApplication>("UniqueId", "Id");
            SyncMerchantRewards = new FakeDbSet<SyncMerchantReward>("UniqueId", "Id");
            SyncMerchantRewardHistories = new FakeDbSet<SyncMerchantRewardHistory>("UniqueId", "Id", "Code");
            SyncPointCommissionBindUsers = new FakeDbSet<SyncPointCommissionBindUser>("UniqueId", "Id");
            SyncPointCommissionSales = new FakeDbSet<SyncPointCommissionSale>("Id", "UniqueId");
            SyncPointCommissionSaleSources = new FakeDbSet<SyncPointCommissionSaleSource>("Id", "UniqueId");
            SyncPointCommissionSaleSourceRelations = new FakeDbSet<SyncPointCommissionSaleSourceRelation>("Id");
            SyncPointSaleRules = new FakeDbSet<SyncPointSaleRule>("Id", "UniqueId");
            SyncPointWholesaleConfigs = new FakeDbSet<SyncPointWholesaleConfig>("Id", "UniqueId");
            SyncProductBarcodeInfoes = new FakeDbSet<SyncProductBarcodeInfo>("Id", "UniqueId");
            SyncProductStocks = new FakeDbSet<SyncProductStock>("Id", "UniqueId");
            SyncSalesClerks = new FakeDbSet<SyncSalesClerk>("Id", "UniqueId");
            SyncSalesOutletGpsInfoes = new FakeDbSet<SyncSalesOutletGpsInfo>("UniqueId");
            SyncServiceCodes = new FakeDbSet<SyncServiceCode>("Id", "UniqueId");
            SyncSuperMarkets = new FakeDbSet<SyncSuperMarket>("UniqueId");
            SyncSuperMarketProducts = new FakeDbSet<SyncSuperMarketProduct>("UniqueId");
            SyncVendingMachines = new FakeDbSet<SyncVendingMachine>("UniqueId");
            SyncVendingMachineProducts = new FakeDbSet<SyncVendingMachineProduct>("UniqueId");
            UserOnLines = new FakeDbSet<UserOnLine>("UniqueId");
            UserRegistInfoes = new FakeDbSet<UserRegistInfo>("Id");
            VendingMachines = new FakeDbSet<VendingMachine>("UniqueId");
            VendingMachineProducts = new FakeDbSet<VendingMachineProduct>("UniqueId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int AddOperationCenterStatistics(System.Guid? uniqueId, System.Guid? operationCenterUniqueId, int? statisticsType, decimal? supermarketRevenueIncrease, int? storeOwnedMemberIncrease, int? storeIncrease, int? supermarketIncrease, System.DateTime? statisticsDateTime)
        {

            return 0;
        }

        public int BatchBindServiceCode(string ownerCode, int? quantity, int? type, string userName, string ownerMobile, System.Guid? ownerUniqueId, string salesOrderCode, System.Guid? importUserUniqueId, System.DateTime? salesOrderActiveTime, decimal? salesOrderAmount, int? salesItemQuantity, decimal? unitPrice, string saleItemName, System.DateTime? currentTime, string remark, out int? result)
        {
            result = default(int);

            return 0;
        }

        public int ClearServiceCodeByMerchantApplicationFaild(int? timeOutCancel, out int? result)
        {
            result = default(int);

            return 0;
        }

        public int ClearServiceCodeByRelevanceUniqueId(int? timeOutCancel, out int? result)
        {
            result = default(int);

            return 0;
        }

        public System.Collections.Generic.List<GetAllStoreReturnModel> GetAllStore()
        {
            int procResult;
            return GetAllStore(out procResult);
        }

        public System.Collections.Generic.List<GetAllStoreReturnModel> GetAllStore(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllStoreReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllStoreReturnModel>> GetAllStoreAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllStore(out procResult));
        }

        public System.Collections.Generic.List<GetAllSupermarketReturnModel> GetAllSupermarket()
        {
            int procResult;
            return GetAllSupermarket(out procResult);
        }

        public System.Collections.Generic.List<GetAllSupermarketReturnModel> GetAllSupermarket(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllSupermarketReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSupermarketReturnModel>> GetAllSupermarketAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllSupermarket(out procResult));
        }

        public System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel> GetDictionaryConfigByCode(string code, int? type)
        {
            int procResult;
            return GetDictionaryConfigByCode(code, type, out procResult);
        }

        public System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel> GetDictionaryConfigByCode(string code, int? type, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDictionaryConfigByCodeReturnModel>> GetDictionaryConfigByCodeAsync(string code, int? type)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDictionaryConfigByCode(code, type, out procResult));
        }

        public GetProductsByKeywords1ReturnModel GetProductsByKeywords1(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng)
        {
            int procResult;
            return GetProductsByKeywords1(pagesize, pageIndex, out count, lat, lng, out procResult);
        }

        public GetProductsByKeywords1ReturnModel GetProductsByKeywords1(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng, out int procResult)
        {
            count = default(int);

            procResult = 0;
            return new GetProductsByKeywords1ReturnModel();
        }

        public GetSalesOutletsAndProductsReturnModel GetSalesOutletsAndProducts(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng)
        {
            int procResult;
            return GetSalesOutletsAndProducts(pagesize, pageIndex, out count, lat, lng, out procResult);
        }

        public GetSalesOutletsAndProductsReturnModel GetSalesOutletsAndProducts(int? pagesize, int? pageIndex, out int? count, float? lat, float? lng, out int procResult)
        {
            count = default(int);

            procResult = 0;
            return new GetSalesOutletsAndProductsReturnModel();
        }

        public GetSalesOutletsAndProductsByKeywordsReturnModel GetSalesOutletsAndProductsByKeywords(int? pagesize, int? pageIndex, out int? count, string keywords, float? lat, float? lng)
        {
            int procResult;
            return GetSalesOutletsAndProductsByKeywords(pagesize, pageIndex, out count, keywords, lat, lng, out procResult);
        }

        public GetSalesOutletsAndProductsByKeywordsReturnModel GetSalesOutletsAndProductsByKeywords(int? pagesize, int? pageIndex, out int? count, string keywords, float? lat, float? lng, out int procResult)
        {
            count = default(int);

            procResult = 0;
            return new GetSalesOutletsAndProductsByKeywordsReturnModel();
        }

        public int GetSalesOutletsByKeywords(int? pageIndex, int? pagesize, out int? count, string keywords, string salesOutletType, bool? isSupportDelivery, string businessCategoryIDs, decimal? maxLng, decimal? minLng, decimal? maxLat, decimal? minLat, decimal? currtLng, decimal? currtLat)
        {
            count = default(int);

            return 0;
        }

        public int GetSalesOutletsByKeywords1(int? pageIndex, int? pagesize, out int? count, string keywords, string salesOutletType, decimal? maxLng, decimal? minLng, decimal? maxLat, decimal? minLat, decimal? currtLng, decimal? currtLat)
        {
            count = default(int);

            return 0;
        }

        public System.Collections.Generic.List<GetServiceCodeByCodeReturnModel> GetServiceCodeByCode(int? pagesize, int? pageIndex, out int? count, string ownerCode, string mobile, string code, bool? isBind, System.DateTime? startTime, System.DateTime? endTime, string operationName, int? approveStatus)
        {
            int procResult;
            return GetServiceCodeByCode(pagesize, pageIndex, out count, ownerCode, mobile, code, isBind, startTime, endTime, operationName, approveStatus, out procResult);
        }

        public System.Collections.Generic.List<GetServiceCodeByCodeReturnModel> GetServiceCodeByCode(int? pagesize, int? pageIndex, out int? count, string ownerCode, string mobile, string code, bool? isBind, System.DateTime? startTime, System.DateTime? endTime, string operationName, int? approveStatus, out int procResult)
        {
            count = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceCodeByCodeReturnModel>();
        }

        public System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel> ServiceGetPointSaleRulesByStatus(int? status)
        {
            int procResult;
            return ServiceGetPointSaleRulesByStatus(status, out procResult);
        }

        public System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel> ServiceGetPointSaleRulesByStatus(int? status, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceGetPointSaleRulesByStatusReturnModel>> ServiceGetPointSaleRulesByStatusAsync(int? status)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ServiceGetPointSaleRulesByStatus(status, out procResult));
        }

        public int ServiceUpdatePointSaleRulesStatus(int? oldStatus, int? newStatus)
        {

            return 0;
        }

        public int ServiceUpdateStockByUniqueId(System.Guid? productUniqueId, bool? isAdd, int? storck)
        {

            return 0;
        }

        public SuperMarketStatisticsReturnModel SuperMarketStatistics(System.DateTime? startTime, System.DateTime? endTime)
        {
            int procResult;
            return SuperMarketStatistics(startTime, endTime, out procResult);
        }

        public SuperMarketStatisticsReturnModel SuperMarketStatistics(System.DateTime? startTime, System.DateTime? endTime, out int procResult)
        {

            procResult = 0;
            return new SuperMarketStatisticsReturnModel();
        }

        public System.Threading.Tasks.Task<SuperMarketStatisticsReturnModel> SuperMarketStatisticsAsync(System.DateTime? startTime, System.DateTime? endTime)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SuperMarketStatistics(startTime, endTime, out procResult));
        }

        public int UpdateServiceCodeByRelevanceUniqueId(System.Guid? relevanceUniqueId)
        {

            return 0;
        }

        public int UpdateServiceRelevanceUniqueIdByOwnerCode(System.Guid? relevanceUniqueId, int? number, string ownerCode)
        {

            return 0;
        }

    }
}
// </auto-generated>
